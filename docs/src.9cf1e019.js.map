{"version":3,"sources":["src/heatmap.js","src/index.js"],"names":["renderHeatMap","config","heatMap","Array","from","length","y","_","x","value","addToNeighbour","cellX","cellY","distance","rowLimit","columnLimit","Math","max","min","abs","app","document","getElementById","innerHTML","heatMapNode","createElement","classList","add","forEach","row","indexX","rowNode","div","indexY","textNode","appendChild","showValues","createTextNode","style","backgroundColor","heatMapColorForValue","Proxy","set","obj","prop","newTextNode","replaceChild","Reflect","arguments","addEventListener","hoverIncrease","hoverRadius","clickIncrease","clickRadius","hue","e","preventDefault","parseInt","checked","dynamicStyles","body","size","target","newDynamicStyles"],"mappings":"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","file":"src.9cf1e019.js","sourceRoot":"..","sourcesContent":["/*\n  Prototype written in 1hour.\n  Refactor code bellow\n */\nfunction renderHeatMap(config) {\n\nconst heatMap = Array.from({length: config.y}, (_, y) => Array.from({length: config.x}, (_, x) => ({\n  value: 0,\n})));\n\n\nconst addToNeighbour = (cellX, cellY, distance = 1) => {\n  const rowLimit = heatMap.length - 1;\n  const columnLimit = heatMap[0].length - 1;\n\n  for(let x = Math.max(0, cellX - distance); x <= Math.min(cellX + distance, rowLimit); x++) {\n    for(let y = Math.max(0, cellY - distance); y <= Math.min(cellY + distance, columnLimit); y++) {\n      if(x !== cellX || y !== cellY) {\n        heatMap[x][y].value += 2 * (distance - Math.max(Math.abs(y - cellY), Math.abs(x - cellX)));\n      }\n    }\n  }\n}\n\nconst cellFactory = (x, y) => {\n  const div = document.createElement('div');\n  div.classList.add('cell');\n  let textNode;\n  if (config.showValues) {\n    textNode = document.createTextNode(heatMap[x][y].value);\n    div.appendChild(textNode);\n  }\n  div.style.backgroundColor = heatMapColorForValue(heatMap[x][y].value);\n\n  heatMap[x][y] = new Proxy(heatMap[x][y], {\n    set: function(obj, prop, value) {\n      div.style.backgroundColor = heatMapColorForValue(value);\n      if (config.showValues) {\n        const newTextNode = document.createTextNode(value);\n        div.replaceChild(newTextNode, textNode);\n        textNode = newTextNode;\n      }\n\n      return Reflect.set(...arguments);\n    }\n  })\n\n\n  div.addEventListener('mouseenter', () => {\n    heatMap[x][y].value += config.hoverIncrease;\n    addToNeighbour(x, y, config.hoverRadius);\n  })\n\n\n  div.addEventListener('click', () => {\n    heatMap[x][y].value += config.clickIncrease;\n    addToNeighbour(x, y, config.clickRadius);\n  })\n  return div;\n}\n\n\nconst rowFactory = () => {\n  const div = document.createElement('div');\n  div.classList.add('row');\n  return div;\n}\n\n\n  const app = document.getElementById('app');\n  app.innerHTML=\"\";\n\n  const heatMapNode = document.createElement('div');\n  heatMapNode.classList.add('heatmap');\n\n  heatMap.forEach((row, indexX)=> {\n    const rowNode = rowFactory()\n    row.forEach((_, indexY) => {\n      rowNode.appendChild(cellFactory(indexX, indexY))\n    })\n\n    heatMapNode.appendChild(rowNode)\n  })\n\n  app.appendChild(heatMapNode);\n}\n\nfunction heatMapColorForValue(value)\n{\n  value = value > 130 ? 130 : value;\n  let hue = (1.0 - value/100) * 240\n\n  return `hsl(${hue}, 100%, 50%)`;\n}\n\nexport {\n  renderHeatMap\n}\n","import { renderHeatMap } from \"./heatmap\";\n\n\nrenderHeatMap({\n  x: 50,\n  y: 30,\n  hoverIncrease: 3,\n  hoverRadius: 3,\n  clickIncrease: 10,\n  clickRadius: 10,\n  showValues: false,\n})\n\n\ndocument.getElementById('updateConfig').addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n  const config = {\n    x: parseInt(document.getElementById('size-x').value),\n    y: parseInt(document.getElementById('size-y').value),\n    hoverIncrease: parseInt(document.getElementById('hover-increase').value),\n    hoverRadius: parseInt(document.getElementById('hover-radius').value),\n    clickIncrease: parseInt(document.getElementById('click-increase').value),\n    clickRadius: parseInt(document.getElementById('click-radius').value),\n    showValues: document.getElementById('show-values').checked\n  }\n\n  renderHeatMap(config)\n})\n\n\nlet dynamicStyles = document.createElement('style');\ndocument.body.appendChild(dynamicStyles);\n\ndocument.getElementById('square-size').addEventListener('input', (e) => {\n  const size = e.target.value;\n  const newDynamicStyles = document.createElement('style');\n  newDynamicStyles.innerHTML = `.cell {width: ${size}px; height: ${size}px; line-height: ${size}px; font-size: ${size/1.2}px`;\n  document.body.replaceChild(newDynamicStyles, dynamicStyles);\n  dynamicStyles = newDynamicStyles;\n})\n"]}